
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.dbpedia.databus</groupId>
    <artifactId>bundle</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0</version>
    <modules>
        <module>add-one-dataset</module>
    </modules>

    <properties>
        <!--dataDirectory DEFAULT: src/main/databus/input
* input folder for data
* copy/move all your datafiles in the respective modules
* all files have to start with the $artifactId of the module, i.e. src/main/databus/input/${artifactId}_en.nt.bz2

-->
        <databus.dataInputDirectory>src/main/databus/input</databus.dataInputDirectory>


        <!--packageDirectory DEFAULT ${session.executionRootDirectory}/target/databus/package
* all files are copied into this directory where mvn databus:package-export is run
-->
        <databus.packageDirectory>${session.executionRootDirectory}/target/databus/package</databus.packageDirectory>

        <databus.publisher>http://kurzum.net/dev-dummy.ttl#this</databus.publisher>
        <!--privateKeyFile
The private key file that is matched against the publisher WebID, see the tutorial suggested there.
Note that Java/Scala only accepts DER/PKCS8 formatted files, so you might need to run:
$ openssl pkcs8 -topk8 -inform PEM -outform DER -in private_key.pem -out private_key.der -nocrypt
We recommend putting the file in ~/.m2 next to the settings.xml (Maven user dir):
```
<privateKeyFile>${user.home}/.m2/private_key.der</privateKeyFile>
```
SECURITY NOTICE:
* Protect your private key file, do not loose, do not send over network
* chmod 700
* The data channel you are about to create requires it to republish new versions there.
        -->
        <!--<databus.privateKeyFile>${user.home}/.m2/private_key.der</databus.privateKeyFile>-->
        <databus.privateKeyFile>private_key_dev_dummy.der</databus.privateKeyFile>

        <!--maintainer
The maintainer of the data release, normally the person to contact, often the same as publisher
        -->
        <databus.maintainer>${databus.publisher}</databus.maintainer>
        <!--license
Pick one from here: http://rdflicense.linkeddata.es/
        -->
        <databus.license>http://purl.oclc.org/NET/rdflicense/cc-by-sa3.0</databus.license>
        <!--not clear if needed-->
        <databus.issuedDate>2018-08-01</databus.issuedDate>
        <!--not clear if needed-->
        <databus.modifiedDate>2018-08-03</databus.modifiedDate>


        <!--publisher
refers to the WebID that does the publication on the web and on the databus
This one is matched against the private key file (next option)
Please read on https://github.com/dbpedia/webid how to create such file
We include a dev-dummy webid file here, please don't use it for publishing, use your own
-->

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--dataDependencyDirectory
NOT IMPLEMENTED YET - This directory will be used to store any files downloaded from the databus as input for your tool
        -->
        <databus.dataDependencyDirectory>NOT-IMPLEMENTED-YET</databus.dataDependencyDirectory>

    </properties>

    <!-- we will move to maven central soon, this is the dev maven repo-->
    <pluginRepositories>
        <pluginRepository>
            <id>archiva.internal</id>
            <name>Internal Release Repository</name>
            <url>http://databus.dbpedia.org:8081/repository/internal</url>
        </pluginRepository>
        <pluginRepository>
            <id>archiva.snapshots</id>
            <name>Internal Snapshot Repository</name>
            <url>http://databus.dbpedia.org:8081/repository/snapshots</url>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <plugins>
            <plugin>
                <groupId>org.dbpedia.databus</groupId>
                <artifactId>databus-maven-plugin</artifactId>
                <version>1.0-SNAPSHOT</version>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>validate</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-data</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test-data</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>metadata</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>metadata</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>

                    <!--DO NOT EDIT HERE, unless you know what you are doing, We recommend changing the properties above-->

                    <!--pluginDirectory Default: ${project.build.directory}/databus
* all the generated files will be written here, i.e. parselogs, dataids, feeds
* the path is relative to the module, i.e. target/databus/
* `mvn clean` will delete all `target` folders in your project
-->
                    <pluginDirectory>${project.build.directory}/databus</pluginDirectory>

                    <!--includeParseLogs DEFAULT: true
            The parselogs are written to ${databus.pluginDirectory}/parselogs and then packaged with the data
            We keep the parselogs in a separate file, because they can be quite large (repeating the triples that have errors)
                     -->
                    <parseLogDirectory>${project.build.directory}/databus/parselogs</parseLogDirectory>
                    <includeParseLogs>true</includeParseLogs>

                    <!--dataIdDirectory DEFAULT: <databus.pluginDirectory>/dataid
            the directory where the dataids and other metadata are written
                    -->
                    <dataIdDirectory>${project.build.directory}/databus/dataid</dataIdDirectory>

                    <!--dataIdDirectory DEFAULT: ${project.build.directory}/databus/feed
            the directory where the rss feeds are written
                    -->
                    <feedDirectory>${project.build.directory}/databus/feed</feedDirectory>
                    <!-- feedFrom
                        existing feed file, feed url, or empty
                        if empty: creates the channel based on the pom properties and use old feed from feedDirectory/feed.xml if exists
                        TODO add property above
                     -->
                    <feedFrom></feedFrom>

                    <dataInputDirectory>${databus.dataInputDirectory}</dataInputDirectory>
                    <packageDirectory>${databus.packageDirectory}</packageDirectory>
                    <publisher>${databus.publisher}</publisher>
                    <maintainer>${databus.maintainer}</maintainer>
                    <license>${databus.license}</license>
                    <privateKeyFile>${databus.privateKeyFile}</privateKeyFile>

                    <issuedDate>${databus.issuedDate}</issuedDate>
                    <modifiedDate>${databus.modifiedDate}</modifiedDate>

                </configuration>
            </plugin>
        </plugins>
    </build>


</project>
