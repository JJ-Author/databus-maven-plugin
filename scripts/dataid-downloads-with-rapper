#!/bin/bash

set -euom pipefail

# TODO better cli

# set the path to a locally compiled rapper 2.0.14 version here if the system-managed version ist 2.0.15
# e.g. rapper14="/data/home/markusa/downloads/raptor2-2.0.14/utils/rapper"
rapper14="rapper"

process_link_cmd=$(cat <<'EOF'

    # extract the first field, omitting the backslash
    url=$(echo "{}" | perl -ne '{ print $1 if /^([^ ]+?)\\/ }')
    sinkpath=$(echo "{}" | awk '{ print $2 }')

    echo "processing $url into $sinkpath"

    mkfifo "$sinkpath.rapper"

    /data/home/markusa/downloads/raptor2-2.0.14/utils/rapper --version

    curl --fail --silent --show-error "$url" \
	| lbzcat -n2 \
	| /data/home/markusa/downloads/raptor2-2.0.14/utils/rapper -i ntriples - http://baseuri 2> "$sinkpath.rapper"  \
	| lbzip2 -n4 > "$sinkpath" &

    cat "$sinkpath.rapper" | lbzip2 -n4 > "$sinkpath.rapper.bz2" &

    wait

    rm "$sinkpath.rapper"
EOF
)

collect_links_and_sinks() {

    for dataid in $*; do 
	    # get dowload paths for dataid
	    links=`rapper -i turtle -o ntriples ${dataid} 2> /dev/null \
	    | grep "<http://www.w3.org/ns/dcat#downloadURL>" \
        | cut -d" " -f3 \
	    | grep -vF ".tql" \
        | sed "s/[<>]//g"`

        for url in ${links}; do
       		filename=${url##*/}
		    version=${url%/*} 
		    artifactId=${version%/*}
		    version=${version##*/} 
		    artifactId=${artifactId##*/} # echo $artifactId $version


            echo "$url" "$artifactId/$version/$filename"
        done
    done
}

collect_links_and_sinks $* | parallel -j 24 "$process_link_cmd"
